From 02f282f116969b0f13c02c72a4104c93c64be303 Mon Sep 17 00:00:00 2001
From: Andrew McRae <admcrae@gatech.edu>
Date: Fri, 16 Jun 2017 20:12:36 -0400
Subject: [PATCH 2/5] Fix warnings with GCC 7.

---
 include/grpc++/impl/codegen/call.h                         | 6 +++---
 src/core/ext/transport/chttp2/transport/bin_decoder.c      | 2 +-
 src/core/ext/transport/cronet/transport/cronet_transport.c | 2 +-
 src/core/lib/json/json_reader.c                            | 1 -
 src/core/tsi/ssl_transport_security.c                      | 5 +++++
 5 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/include/grpc++/impl/codegen/call.h b/include/grpc++/impl/codegen/call.h
index f45ab239fc..550ba05668 100644
--- a/include/grpc++/impl/codegen/call.h
+++ b/include/grpc++/impl/codegen/call.h
@@ -447,7 +447,7 @@ class CallOpClientSendClose {
 
 class CallOpServerSendStatus {
  public:
-  CallOpServerSendStatus() : send_status_available_(false) {}
+  CallOpServerSendStatus() : send_status_available_(false), send_status_code_(GRPC_STATUS_OK) {}
 
   void ServerSendStatus(
       const std::multimap<grpc::string, grpc::string>& trailing_metadata,
@@ -523,7 +523,7 @@ class CallOpRecvInitialMetadata {
 
 class CallOpClientRecvStatus {
  public:
-  CallOpClientRecvStatus() : recv_status_(nullptr) {}
+  CallOpClientRecvStatus() : recv_status_(nullptr), status_code_(GRPC_STATUS_OK) {}
 
   void ClientRecvStatus(ClientContext* context, Status* status) {
     metadata_map_ = &context->trailing_metadata_;
@@ -596,7 +596,7 @@ class CallOpSet : public CallOpSetInterface,
                   public Op5,
                   public Op6 {
  public:
-  CallOpSet() : return_tag_(this) {}
+  CallOpSet() : return_tag_(this), call_(nullptr) {}
   void FillOps(grpc_call* call, grpc_op* ops, size_t* nops) override {
     this->Op1::AddOp(ops, nops);
     this->Op2::AddOp(ops, nops);
diff --git a/src/core/ext/transport/chttp2/transport/bin_decoder.c b/src/core/ext/transport/chttp2/transport/bin_decoder.c
index 5a99cbeffc..f129e6e12f 100644
--- a/src/core/ext/transport/chttp2/transport/bin_decoder.c
+++ b/src/core/ext/transport/chttp2/transport/bin_decoder.c
@@ -118,7 +118,7 @@ bool grpc_base64_decode_partial(struct grpc_base64_decode_context *ctx) {
       switch (input_tail) {
         case 3:
           ctx->output_cur[1] = COMPOSE_OUTPUT_BYTE_1(ctx->input_cur);
-        /* fallthrough */
+	/* fallthrough */
         case 2:
           ctx->output_cur[0] = COMPOSE_OUTPUT_BYTE_0(ctx->input_cur);
       }
diff --git a/src/core/ext/transport/cronet/transport/cronet_transport.c b/src/core/ext/transport/cronet/transport/cronet_transport.c
index abb558982b..3cfeba0a65 100644
--- a/src/core/ext/transport/cronet/transport/cronet_transport.c
+++ b/src/core/ext/transport/cronet/transport/cronet_transport.c
@@ -650,7 +650,7 @@ static void create_grpc_frame(grpc_exec_ctx *exec_ctx,
   uint8_t *p = (uint8_t *)write_buffer;
   /* Append 5 byte header */
   /* Compressed flag */
-  *p++ = (flags & GRPC_WRITE_INTERNAL_COMPRESS) ? 1 : 0;
+  *p++ = (uint8_t) ((flags & GRPC_WRITE_INTERNAL_COMPRESS) ? 1 : 0);
   /* Message length */
   *p++ = (uint8_t)(length >> 24);
   *p++ = (uint8_t)(length >> 16);
diff --git a/src/core/lib/json/json_reader.c b/src/core/lib/json/json_reader.c
index 094a35176c..4471fccff8 100644
--- a/src/core/lib/json/json_reader.c
+++ b/src/core/lib/json/json_reader.c
@@ -177,7 +177,6 @@ grpc_json_reader_status grpc_json_reader_run(grpc_json_reader *reader) {
             if (!success) return GRPC_JSON_PARSE_ERROR;
             json_reader_string_clear(reader);
             reader->state = GRPC_JSON_STATE_VALUE_END;
-          /* The missing break here is intentional. */
           /* fallthrough */
 
           case GRPC_JSON_STATE_VALUE_END:
diff --git a/src/core/tsi/ssl_transport_security.c b/src/core/tsi/ssl_transport_security.c
index b80ba8124e..f91f60168d 100644
--- a/src/core/tsi/ssl_transport_security.c
+++ b/src/core/tsi/ssl_transport_security.c
@@ -107,6 +107,8 @@ typedef struct {
 static gpr_once init_openssl_once = GPR_ONCE_INIT;
 static gpr_mu *openssl_mutexes = NULL;
 
+/* These functions are no longer used in OpenSSL 1.1 */
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static void openssl_locking_cb(int mode, int type, const char *file, int line) {
   if (mode & CRYPTO_LOCK) {
     gpr_mu_lock(&openssl_mutexes[type]);
@@ -118,6 +120,7 @@ static void openssl_locking_cb(int mode, int type, const char *file, int line) {
 static unsigned long openssl_thread_id_cb(void) {
   return (unsigned long)gpr_thd_currentid();
 }
+#endif  // OPENSSL_VERSION_NUMBER < 0x10100000L
 
 static void init_openssl(void) {
   int i;
@@ -131,8 +134,10 @@ static void init_openssl(void) {
   for (i = 0; i < CRYPTO_num_locks(); i++) {
     gpr_mu_init(&openssl_mutexes[i]);
   }
+#if OPENSSL_VERSION_NUMBER < 0x10100000L // These macros are no-ops in OpenSSL 1.1
   CRYPTO_set_locking_callback(openssl_locking_cb);
   CRYPTO_set_id_callback(openssl_thread_id_cb);
+#endif  // OPENSSL_VERSION_NUMBER < 0x10100000L
 }
 
 /* --- Ssl utils. ---*/
-- 
2.13.6

