diff -ur ../grpc.orig/src/core/lib/security/credentials/jwt/jwt_verifier.c ./src/core/lib/security/credentials/jwt/jwt_verifier.c
--- ../grpc.orig/src/core/lib/security/credentials/jwt/jwt_verifier.c	2017-06-13 22:46:52.417461345 +0000
+++ ./src/core/lib/security/credentials/jwt/jwt_verifier.c	2017-06-13 21:31:51.286402253 +0000
@@ -50,6 +50,31 @@
 #include "src/core/lib/support/string.h"
 #include "src/core/tsi/ssl_types.h"
 
+/* --- OpenSSL helpers. --- */
+
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
+int RSA_set0_key(RSA *rsa, BIGNUM *n, BIGNUM *e, BIGNUM *d) {
+  if (n != NULL) {
+    BN_free(rsa->n);
+    rsa->n = n;
+  }
+
+  if (e != NULL) {
+    BN_free(rsa->e);
+    rsa->e = e;
+  }
+
+  if (d != NULL) {
+    /* This path not actually used in this file, but included for
+       completeness. */
+    BN_free(rsa->d);
+    rsa->d = d;
+  }
+
+  return 1;
+}
+#endif
+
 /* --- Utils. --- */
 
 const char *grpc_jwt_verifier_status_to_string(
@@ -482,6 +507,8 @@
   const grpc_json *key_prop;
   RSA *rsa = NULL;
   EVP_PKEY *result = NULL;
+  BIGNUM *n = NULL;
+  BIGNUM *e = NULL;
 
   GPR_ASSERT(kty != NULL && json != NULL);
   if (strcmp(kty, "RSA") != 0) {
@@ -495,24 +522,30 @@
   }
   for (key_prop = json->child; key_prop != NULL; key_prop = key_prop->next) {
     if (strcmp(key_prop->key, "n") == 0) {
-      rsa->n =
-          bignum_from_base64(exec_ctx, validate_string_field(key_prop, "n"));
-      if (rsa->n == NULL) goto end;
+      n = bignum_from_base64(exec_ctx, validate_string_field(key_prop, "n"));
+      if (n == NULL) goto end;
     } else if (strcmp(key_prop->key, "e") == 0) {
-      rsa->e =
-          bignum_from_base64(exec_ctx, validate_string_field(key_prop, "e"));
-      if (rsa->e == NULL) goto end;
+      e = bignum_from_base64(exec_ctx, validate_string_field(key_prop, "e"));
+      if (e == NULL) goto end;
     }
   }
-  if (rsa->e == NULL || rsa->n == NULL) {
+  if (e == NULL || n == NULL) {
     gpr_log(GPR_ERROR, "Missing RSA public key field.");
     goto end;
   }
+  if (!RSA_set0_key(rsa, n, e, NULL)) {
+    gpr_log(GPR_ERROR, "Could not update RSA public key fields.");
+    goto end;
+  }
+  n = e = NULL; /* Now owned by the RSA object. */
+
   result = EVP_PKEY_new();
   EVP_PKEY_set1_RSA(result, rsa); /* uprefs rsa. */
 
 end:
   if (rsa != NULL) RSA_free(rsa);
+  if (n != NULL) BN_free(n);
+  if (e != NULL) BN_free(e);
   return result;
 }
 
diff -ur ../grpc.orig/src/core/tsi/ssl_transport_security.c ./src/core/tsi/ssl_transport_security.c
--- ../grpc.orig/src/core/tsi/ssl_transport_security.c	2017-06-13 22:46:52.417461345 +0000
+++ ./src/core/tsi/ssl_transport_security.c	2017-06-13 21:36:25.555100602 +0000
@@ -120,6 +120,8 @@
 /* --- Library Initialization. ---*/
 
 static gpr_once init_openssl_once = GPR_ONCE_INIT;
+
+#if OPENSSL_VERSION_NUMBER < 0x10100000L
 static gpr_mu *openssl_mutexes = NULL;
 
 static void openssl_locking_cb(int mode, int type, const char *file, int line) {
@@ -134,12 +136,9 @@
   return (unsigned long)gpr_thd_currentid();
 }
 
-static void init_openssl(void) {
+static void init_openssl_locks(void) {
   int i;
   int num_locks;
-  SSL_library_init();
-  SSL_load_error_strings();
-  OpenSSL_add_all_algorithms();
   num_locks = CRYPTO_num_locks();
   GPR_ASSERT(num_locks > 0);
   openssl_mutexes = gpr_malloc((size_t)num_locks * sizeof(gpr_mu));
@@ -149,6 +148,17 @@
   CRYPTO_set_locking_callback(openssl_locking_cb);
   CRYPTO_set_id_callback(openssl_thread_id_cb);
 }
+#else
+static void init_openssl_locks(void) {
+}
+#endif
+
+static void init_openssl(void) {
+  SSL_library_init();
+  SSL_load_error_strings();
+  OpenSSL_add_all_algorithms();
+  init_openssl_locks();
+}
 
 /* --- Ssl utils. ---*/
 
@@ -834,15 +844,17 @@
   *unprotected_bytes_size = output_bytes_size - output_bytes_offset;
 
   /* Then, try to write some data to ssl. */
-  GPR_ASSERT(*protected_frames_bytes_size <= INT_MAX);
-  written_into_ssl = BIO_write(impl->into_ssl, protected_frames_bytes,
-                               (int)*protected_frames_bytes_size);
-  if (written_into_ssl < 0) {
-    gpr_log(GPR_ERROR, "Sending protected frame to ssl failed with %d",
-            written_into_ssl);
-    return TSI_INTERNAL_ERROR;
+  if (*protected_frames_bytes_size) {
+    GPR_ASSERT(*protected_frames_bytes_size <= INT_MAX);
+    written_into_ssl = BIO_write(impl->into_ssl, protected_frames_bytes,
+                                (int)*protected_frames_bytes_size);
+    if (written_into_ssl < 0) {
+      gpr_log(GPR_ERROR, "Sending protected frame to ssl failed with %d",
+              written_into_ssl);
+      return TSI_INTERNAL_ERROR;
+    }
+    *protected_frames_bytes_size = (size_t)written_into_ssl;
   }
-  *protected_frames_bytes_size = (size_t)written_into_ssl;
 
   /* Now try to read some data again. */
   result = do_ssl_read(impl->ssl, unprotected_bytes, unprotected_bytes_size);
@@ -1297,12 +1309,17 @@
   *factory = NULL;
   if (pem_root_certs == NULL) return TSI_INVALID_ARGUMENT;
 
-  ssl_context = SSL_CTX_new(TLSv1_2_method());
+  ssl_context = SSL_CTX_new(TLS_method());
   if (ssl_context == NULL) {
     gpr_log(GPR_ERROR, "Could not create ssl context.");
     return TSI_INVALID_ARGUMENT;
   }
 
+  if (!SSL_CTX_set_min_proto_version(ssl_context, TLS1_2_VERSION)) {
+    gpr_log(GPR_ERROR, "Could not set minimum TLS version.");
+    return TSI_INVALID_ARGUMENT;
+  }
+
   impl = gpr_zalloc(sizeof(*impl));
   impl->ssl_context = ssl_context;
 
@@ -1405,7 +1422,7 @@
 
   for (i = 0; i < num_key_cert_pairs; i++) {
     do {
-      impl->ssl_contexts[i] = SSL_CTX_new(TLSv1_2_method());
+      impl->ssl_contexts[i] = SSL_CTX_new(TLS_method());
       if (impl->ssl_contexts[i] == NULL) {
         gpr_log(GPR_ERROR, "Could not create ssl context.");
         result = TSI_OUT_OF_RESOURCES;
diff -ur ../grpc.orig/test/core/handshake/client_ssl.c ./test/core/handshake/client_ssl.c
--- ../grpc.orig/test/core/handshake/client_ssl.c	2017-06-13 22:46:52.417461345 +0000
+++ ./test/core/handshake/client_ssl.c	2017-06-13 21:31:51.287402252 +0000
@@ -153,13 +153,19 @@
   SSL_load_error_strings();
   OpenSSL_add_ssl_algorithms();
 
-  const SSL_METHOD *method = TLSv1_2_server_method();
+  const SSL_METHOD *method = TLS_server_method();
   SSL_CTX *ctx = SSL_CTX_new(method);
   if (!ctx) {
     perror("Unable to create SSL context");
     ERR_print_errors_fp(stderr);
     abort();
   }
+
+  if (!SSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION)) {
+    perror("Could not set minimum TLS version");
+    ERR_print_errors_fp(stderr);
+    abort();
+  }
 
   // Load key pair.
   if (SSL_CTX_use_certificate_file(ctx, SSL_CERT_PATH, SSL_FILETYPE_PEM) < 0) {
diff -ur ../grpc.orig/test/core/handshake/server_ssl.c ./test/core/handshake/server_ssl.c
--- ../grpc.orig/test/core/handshake/server_ssl.c	2017-06-13 22:46:52.418461344 +0000
+++ ./test/core/handshake/server_ssl.c	2017-06-13 21:31:51.287402252 +0000
@@ -155,13 +155,19 @@
   SSL_load_error_strings();
   OpenSSL_add_ssl_algorithms();
 
-  const SSL_METHOD *method = TLSv1_2_client_method();
+  const SSL_METHOD *method = TLS_client_method();
   SSL_CTX *ctx = SSL_CTX_new(method);
   if (!ctx) {
     perror("Unable to create SSL context");
     ERR_print_errors_fp(stderr);
     abort();
   }
+
+  if (!SSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION)) {
+    perror("Could not set minimum TLS version");
+    ERR_print_errors_fp(stderr);
+    abort();
+  }
 
   // Load key pair.
   if (SSL_CTX_use_certificate_file(ctx, SSL_CERT_PATH, SSL_FILETYPE_PEM) < 0) {
